// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: groupresponses.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createGroupResponse = `-- name: CreateGroupResponse :one
INSERT INTO group_responses (id, group_question_id, response, created_at, author_id)
VALUES (gen_random_uuid(), $1, $2, NOW(), $3)
RETURNING id, group_question_id, response, created_at, author_id
`

type CreateGroupResponseParams struct {
	GroupQuestionID uuid.UUID
	Response        string
	AuthorID        uuid.UUID
}

func (q *Queries) CreateGroupResponse(ctx context.Context, arg CreateGroupResponseParams) (GroupResponse, error) {
	row := q.db.QueryRowContext(ctx, createGroupResponse, arg.GroupQuestionID, arg.Response, arg.AuthorID)
	var i GroupResponse
	err := row.Scan(
		&i.ID,
		&i.GroupQuestionID,
		&i.Response,
		&i.CreatedAt,
		&i.AuthorID,
	)
	return i, err
}

const getGroupResponses = `-- name: GetGroupResponses :many
SELECT gr.id, gr.group_question_id, gr.response, gr.created_at, gr.author_id
FROM group_responses gr
JOIN group_questions gq ON gr.group_question_id = gq.id
WHERE gr.group_question_id = $1
  AND (
    gr.author_id = $2
    OR (
      SELECT COUNT(DISTINCT author_id)
      FROM group_responses
      WHERE group_question_id = $1
    ) >= (
      SELECT COUNT(*)
      FROM groups
      WHERE group_id = gq.group_id
    )
  )
`

type GetGroupResponsesParams struct {
	GroupQuestionID uuid.UUID
	AuthorID        uuid.UUID
}

func (q *Queries) GetGroupResponses(ctx context.Context, arg GetGroupResponsesParams) ([]GroupResponse, error) {
	rows, err := q.db.QueryContext(ctx, getGroupResponses, arg.GroupQuestionID, arg.AuthorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupResponse
	for rows.Next() {
		var i GroupResponse
		if err := rows.Scan(
			&i.ID,
			&i.GroupQuestionID,
			&i.Response,
			&i.CreatedAt,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
