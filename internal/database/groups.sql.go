// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: groups.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createGroup = `-- name: CreateGroup :one
WITH users as (
    SELECT id, email, password, name, birthday, created_at, updated_at FROM users WHERE users.email = $3
)
INSERT INTO groups (id, group_id, group_name, user_id, created_at, updated_at)
SELECT gen_random_uuid(), $1, $2, users.id, NOW(), NOW()
FROM users
RETURNING id, group_id, user_id, created_at, updated_at, group_name
`

type CreateGroupParams struct {
	GroupID   uuid.UUID
	GroupName string
	Email     string
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup, arg.GroupID, arg.GroupName, arg.Email)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroupName,
	)
	return i, err
}

const createGroupWithUserID = `-- name: CreateGroupWithUserID :one
INSERT INTO groups (id, group_id, group_name, user_id, created_at, updated_at)
VALUES(gen_random_uuid(), $1, $2, $3, NOW(), NOW())
RETURNING id, group_id, user_id, created_at, updated_at, group_name
`

type CreateGroupWithUserIDParams struct {
	GroupID   uuid.UUID
	GroupName string
	UserID    uuid.UUID
}

func (q *Queries) CreateGroupWithUserID(ctx context.Context, arg CreateGroupWithUserIDParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroupWithUserID, arg.GroupID, arg.GroupName, arg.UserID)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroupName,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const getGroupsByUserID = `-- name: GetGroupsByUserID :many
SELECT id, group_id, user_id, created_at, updated_at, group_name FROM groups
WHERE user_id = $1
`

func (q *Queries) GetGroupsByUserID(ctx context.Context, userID uuid.UUID) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, getGroupsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroupName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isUserInGroup = `-- name: IsUserInGroup :one
SELECT EXISTS (
    SELECT 1
    FROM groups
    WHERE group_id = $1 AND user_id = $2
)
`

type IsUserInGroupParams struct {
	GroupID uuid.UUID
	UserID  uuid.UUID
}

func (q *Queries) IsUserInGroup(ctx context.Context, arg IsUserInGroupParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUserInGroup, arg.GroupID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
