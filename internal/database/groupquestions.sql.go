// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: groupquestions.sql

package database

import (
	"context"

	"cloud.google.com/go/civil"
	"github.com/google/uuid"
)

const countGroupQuestions = `-- name: CountGroupQuestions :one
SELECT COUNT(*)
FROM group_questions
WHERE date = $1 AND group_id = $2 AND created_by = $3
`

type CountGroupQuestionsParams struct {
	Date      civil.Date
	GroupID   uuid.UUID
	CreatedBy uuid.UUID
}

func (q *Queries) CountGroupQuestions(ctx context.Context, arg CountGroupQuestionsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countGroupQuestions, arg.Date, arg.GroupID, arg.CreatedBy)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createGroupQuestions = `-- name: CreateGroupQuestions :many
WITH available_questions AS (
    SELECT q.id AS question_id
    FROM questions q
    WHERE NOT EXISTS (
        SELECT 1
        FROM group_questions gq
        WHERE gq.group_id = $1 AND gq.question_id = q.id
    )
    ORDER BY RANDOM()
    LIMIT $2
),
inserted AS (
    INSERT INTO group_questions (
        id,
        group_id,
        date,
        question_id,
        created_at,
        updated_at,
        created_by
    )
    SELECT
        gen_random_uuid(),
        $1,
        $3,
        aq.question_id,
        NOW(),
        NOW(),
        $4
    FROM available_questions aq
    RETURNING id, group_id, date, question_id, created_by
)
SELECT
    i.id,
    i.group_id,
    i.date,
    q.text,
    i.created_by
FROM inserted i
JOIN questions q ON i.question_id = q.id
`

type CreateGroupQuestionsParams struct {
	GroupID   uuid.UUID
	Limit     int32
	Date      civil.Date
	CreatedBy uuid.UUID
}

type CreateGroupQuestionsRow struct {
	ID        uuid.UUID
	GroupID   uuid.UUID
	Date      civil.Date
	Text      string
	CreatedBy uuid.UUID
}

func (q *Queries) CreateGroupQuestions(ctx context.Context, arg CreateGroupQuestionsParams) ([]CreateGroupQuestionsRow, error) {
	rows, err := q.db.QueryContext(ctx, createGroupQuestions,
		arg.GroupID,
		arg.Limit,
		arg.Date,
		arg.CreatedBy,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CreateGroupQuestionsRow
	for rows.Next() {
		var i CreateGroupQuestionsRow
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.Date,
			&i.Text,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteGroupQuestions = `-- name: DeleteGroupQuestions :exec
DELETE FROM group_questions
WHERE group_id = $1 and date = $2
`

type DeleteGroupQuestionsParams struct {
	GroupID uuid.UUID
	Date    civil.Date
}

func (q *Queries) DeleteGroupQuestions(ctx context.Context, arg DeleteGroupQuestionsParams) error {
	_, err := q.db.ExecContext(ctx, deleteGroupQuestions, arg.GroupID, arg.Date)
	return err
}

const getGroupQuestions = `-- name: GetGroupQuestions :many
SELECT DISTINCT ON (gq.id)
    gq.id,
    gq.group_id,
    gq.date,
    q.text,
    gq.created_by
FROM group_questions gq
JOIN questions q ON gq.question_id = q.id 
WHERE gq.date = $1 AND gq.group_id = $2
  AND (
    gq.created_by = $3
    OR EXISTS (
      SELECT 1
      FROM group_responses gr
      WHERE gr.group_question_id = gq.id
    )
  )
`

type GetGroupQuestionsParams struct {
	Date      civil.Date
	GroupID   uuid.UUID
	CreatedBy uuid.UUID
}

type GetGroupQuestionsRow struct {
	ID        uuid.UUID
	GroupID   uuid.UUID
	Date      civil.Date
	Text      string
	CreatedBy uuid.UUID
}

func (q *Queries) GetGroupQuestions(ctx context.Context, arg GetGroupQuestionsParams) ([]GetGroupQuestionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getGroupQuestions, arg.Date, arg.GroupID, arg.CreatedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGroupQuestionsRow
	for rows.Next() {
		var i GetGroupQuestionsRow
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.Date,
			&i.Text,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
